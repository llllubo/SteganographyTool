[
    {
        "Method": "nops",
        "Classes": [
            {
                "Name": "2 Bytes Long NOP",
                "Description": "This class contains all possible 2 bytes long NOP instructions. Their position in members array determines encoding.",
                "Members": [
                    "0x6690",
                    "0x9090",
                    "0xd9d0"
                ]
            },
            {
                "Name": "3 Bytes Long NOP",
                "Description": "This class contains all possible 3 bytes long NOP instructions. Their position in members array determines encoding.",
                "Members": [
                    "0x0f1f00",
                    "0x909090",
                    "0x906690",
                    "0x669090",
                    "0xd9d090",
                    "0x90d9d0"
                ]
            },
            {
                "Name": ">3 Bytes Long NOP",
                "Description": "Uses last bytes from multi-byte NOP instructions (more than 3 bytes long NOPs) to embedding. Members array is not needed here.",
                "Members": []
            }
        ]
    },
    {
        "Method": "ext-sub",
        "Classes": [
            {
                "Name": "TEST non-accumulator-register",
                "Description": "TEST instruction differ has two opcodes when first operand si non-accumulator register (only AH register is allowed) and second is immediate value. Bit of information is hidden in ModR/M byte at LSB of Reg/Opcode field. E.g. TEST ebx, 0x10",
                "Members": [
                    "TEST /0",
                    "TEST /1"
                ]
            },
            {
                "Name": "Swap base-index",
                "Description": "It's possible to swap base and index registers, if scale is set to 1 (registers in memory operand can be at least 32-bits long). Members array is not needed here as encoding is determined lexicographically. E.g. MOV dword[eax + ebx*1], 0x5; MOV dword[ebx + eax*1], 0x5",
                "Members": []
            },
            {
                "Name": "SHL/SAL",
                "Description": "SAL is always changed to SHL by disassemblers. They differ in Reg/Opcode field inside ModR/M byte. SHL/SAL eax, 0x2",
                "Members": [
                    "SHL /4",
                    "SHL /6"
                ]
            },
            {
                "Name": "ADD 32-bit",
                "Description": "ADD instruction with immediate byte operand has two possible opcodes, but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. ADD byte [eax], 0x2",
                "Members": [
                    "ADD m8, imm8",
                    "ADD non-al-r8, imm8"
                ]
            },
            {
                "Name": "SUB 32-bit",
                "Description": "SUB instruction with immediate byte operand has two possible opcodes, but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. SUB byte [eax], 0x2",
                "Members": [
                    "SUB m8, imm8",
                    "SUB non-al-r8, imm8"
                ]
            },
            {
                "Name": "CMP 32-bit",
                "Description": "CMP instruction with immediate byte operand has two possible opcodes, but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. CMP byte [eax], 0x2",
                "Members": [
                    "CMP m8, imm8",
                    "CMP non-al-r8, imm8"
                ]
            },
            {
                "Name": "AND 32-bit",
                "Description": "AND instruction with immediate byte operand has two possible opcodes, but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. AND byte [eax], 0x2",
                "Members": [
                    "AND m8, imm8",
                    "AND non-al-r8, imm8"
                ]
            },
            {
                "Name": "OR 32-bit",
                "Description": "OR instruction with immediate byte operand has two possible opcodes, but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. OR byte [eax], 0x2",
                "Members": [
                    "OR m8, imm8",
                    "OR non-al-r8, imm8"
                ]
            },
            {
                "Name": "XOR 32-bit",
                "Description": "XOR instruction with immediate byte operand has two possible opcodes, but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. XOR byte [eax], 0x2",
                "Members": [
                    "XOR m8, imm8",
                    "XOR non-al-r8, imm8"
                ]
            },
            {
                "Name": "ADC 32-bit",
                "Description": "ADC instruction with immediate byte operand has two possible opcodes, but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. ADC byte [eax], 0x2",
                "Members": [
                    "ADC m8, imm8",
                    "ADC non-al-r8, imm8"
                ]
            },
            {
                "Name": "SBB 32-bit",
                "Description": "SBB instruction with immediate byte operand has two possible opcodes, but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. SBB byte [eax], 0x2",
                "Members": [
                    "SBB m8, imm8",
                    "SBB non-al-r8, imm8"
                ]
            }
        ]
    },
    {
        "Method": "sub",
        "Classes": [
            {
                "Name": "TEST/AND/OR",
                "Description": "Must have both operands same (registers)! This has priority over the 'and' and 'or' classes. E.g. TEST/AND/OR eax, eax. All these instructions modify RFLAGS register in the same way.",
                "Members": [
                    "TEST r/m, r",
                    "AND r/m, r",
                    "AND r, r/m",
                    "OR r/m, r",
                    "OR r, r/m"
                ]
            },
            
        
            {
                "Name": "SUB/XOR",
                "Description": "Must have both operands same (registers)! This has priority over the 'and' and 'or' classes. E.g. XOR/SUB eax, eax. Only Flag AF is modified by both instructions in different way, therefore it has to be checked.",
                "Members": [
                    "XOR r/m, r",
                    "XOR r, r/m",
                    "SUB r/m, r",
                    "SUB r, r/m"
                ]
            },
        
        
            {
                "Name": "MOV",
                "Description": "MOV instruction has two possible opcodes when both operands are any registers. E.g. MOV ebx, ecx",
                "Members": [
                    "MOV r/m, r",
                    "MOV r, r/m"
                ]
            },
            {
                "Name": "ADD",
                "Description": "ADD instruction has two possible opcodes when both operands are any registers. E.g. ADD ebx, ecx",
                "Members": [
                    "ADD r/m, r",
                    "ADD r, r/m"
                ]
            },
            {
                "Name": "SUB",
                "Description": "SUB instruction has two possible opcodes when both operands are any registers. E.g. SUB ebx, ecx",
                "Members": [
                    "SUB r/m, r",
                    "SUB r, r/m"
                ]
            },
            {
                "Name": "AND",
                "Description": "AND instruction has two possible opcodes when both operands are any registers. E.g. AND ebx, ecx",
                "Members": [
                    "AND r/m, r",
                    "AND r, r/m"
                ]
            },
            {
                "Name": "OR",
                "Description": "OR instruction has two possible opcodes when both operands are any registers. E.g. OR ebx, ecx",
                "Members": [
                    "OR r/m, r",
                    "OR r, r/m"
                ]
            },
            {
                "Name": "XOR",
                "Description": "XOR instruction has two possible opcodes when both operands are any registers. E.g. XOR ebx, ecx",
                "Members": [
                    "XOR r/m, r",
                    "XOR r, r/m"
                ]
            },
            {
                "Name": "CMP",
                "Description": "CMP instruction has two possible opcodes when both operands are any registers. E.g. CMP ebx, ecx",
                "Members": [
                    "CMP r/m, r",
                    "CMP r, r/m"
                ]
            },
            {
                "Name": "ADC",
                "Description": "ADC instruction has two possible opcodes when both operands are any registers. E.g. ADC ebx, ecx",
                "Members": [
                    "ADC r/m, r",
                    "ADC r, r/m"
                ]
            },
            {
                "Name": "SBB",
                "Description": "SBB instruction has two possible opcodes when both operands are any registers. E.g. SBB ebx, ecx",
                "Members": [
                    "SBB r/m, r",
                    "SBB r, r/m"
                ]
            },
        
        
            {
                "Name": "ADD negated",
                "Description": "Addition with immediate value and subtraction with its negative form of immediate value! E.g. ADD ebx, 0x10; SUB ebx, -0x10. Flags OF, CF and AF are modified differently, therefore they need to be checked.",
                "Members": [
                    "ADD r/m, imm",
                    "SUB r/m, -imm"
                ]
            },
            {
                "Name": "SUB negated",
                "Description": "Subtraction with immediate value and addition with its negative form of immediate value! E.g. SUB ebx, 0x10; ADD ebx, -0x10. Flags OF, CF and AF are modified differently, therefore they need to be checked.",
                "Members": [
                    "SUB r/m, imm",
                    "ADD r/m, -imm"
                ]
            }
        ]
    }
]