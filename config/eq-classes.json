{
    "Scheduling": {
        "MOV Scheduling": {
            "Description": "",
            "Members": []
        }
    },


    "NOP Instructions Using": {
        "2 Bytes Long NOP": {
            "Description": "This class contains all possible 2 bytes long NOP instructions. Their position in members array determines encoding.",
            "Members": [
                "0x6690",
                "0x9090",
                "0xd9d0"
            ]
        },
        "3 Bytes Long NOP": {
            "Description": "This class contains all possible 3 bytes long NOP instructions. Their position in members array determines encoding.",
            "Members": [
                "0x0f1f00",
                "0x909090",
                "0x906690",
                "0x669090",
                "0xd9d090",
                "0x90d9d0"
            ]
        },
        ">3 Bytes Long NOP": {
            "Description": "Uses last bytes from multi-byte NOP instructions (more than 3 bytes long NOPs) to embedding. Members array is not needed here.",
            "Members": []
        }
    },


    "Extended Instruction Substitution": {
        "TEST non-accumulator register": {
            "Description": "TEST instruction has two opcodes when first operand is non-accumulator register (except AH register) and second is immediate value. Then, bit of information is hidden in ModR/M byte at LSB of Reg/Opcode field. E.g. TEST ebx, 0x10",
            "Members": [
                "TEST /0",
                "TEST /1"
            ]
        },
        "Swap base-index registers": {
            "Description": "It's possible to swap base and index registers, if scale is set to 1 (registers in memory operand can be at least 32-bits long and must be of the same size). Members array is not needed here as encoding is determined lexicographically. E.g. MOV dword[eax + ebx*1], 0x5; MOV dword[ebx + eax*1], 0x5",
            "Members": []
        },
        "SHL/SAL": {
            "Description": "SAL is always changed to SHL by disassemblers. They differ in Reg/Opcode field inside ModR/M byte. E.g. SHL/SAL eax, 0x2",
            "Members": [
                "SHL /4",
                "SHL /6"
            ]
        },
        "ADD 32-bit": {
            "Description": "ADD instruction with immediate byte operand has two possible opcodes (first operand can be either memory or non-AL-register), but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. ADD byte [eax], 0x2",
            "Members": [
                "Direction Bit: 0",
                "Direction Bit: 1"
            ]
        },
        "SUB 32-bit": {
            "Description": "SUB instruction with immediate byte operand has two possible opcodes (first operand can be either memory or non-AL-register), but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. SUB byte [eax], 0x2",
            "Members": [
                "Direction Bit: 0",
                "Direction Bit: 1"
            ]
        },
        "CMP 32-bit": {
            "Description": "CMP instruction with immediate byte operand has two possible opcodes (first operand can be either memory or non-AL-register), but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. CMP byte [eax], 0x2",
            "Members": [
                "Direction Bit: 0",
                "Direction Bit: 1"
            ]
        },
        "AND 32-bit": {
            "Description": "AND instruction with immediate byte operand has two possible opcodes (first operand can be either memory or non-AL-register), but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. AND byte [eax], 0x2",
            "Members": [
                "Direction Bit: 0",
                "Direction Bit: 1"
            ]
        },
        "OR 32-bit": {
            "Description": "OR instruction with immediate byte operand has two possible opcodes (first operand can be either memory or non-AL-register), but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. OR byte [eax], 0x2",
            "Members": [
                "Direction Bit: 0",
                "Direction Bit: 1"
            ]
        },
        "XOR 32-bit": {
            "Description": "XOR instruction with immediate byte operand has two possible opcodes (first operand can be either memory or non-AL-register), but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. XOR byte [eax], 0x2",
            "Members": [
                "Direction Bit: 0",
                "Direction Bit: 1"
            ]
        },
        "ADC 32-bit": {
            "Description": "ADC instruction with immediate byte operand has two possible opcodes (first operand can be either memory or non-AL-register), but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. ADC byte [eax], 0x2",
            "Members": [
                "Direction Bit: 0",
                "Direction Bit: 1"
            ]
        },
        "SBB 32-bit": {
            "Description": "SBB instruction with immediate byte operand has two possible opcodes (first operand can be either memory or non-AL-register), but ONLY in 32-bit versions! Bit of information is hidden in Direction bit of instruction opcode. E.g. SBB byte [eax], 0x2",
            "Members": [
                "Direction Bit: 0",
                "Direction Bit: 1"
            ]
        }
    },


    "Basic Instruction Substitution": {
        "TEST/AND/OR": {
            "Description": "Must have both operands same (registers)! This has priority over the 'AND' and 'OR' classes. E.g. TEST/AND/OR eax, eax. All these instructions modify RFLAGS register in the same way. Form of the instruction (r/m, r or r, r/m) determines Direction bit inside instruction OPCODE (0 and 1, respectively). TEST instruction does not have r, r/m form.",
            "Members": [
                "TEST r/m, r",
                "AND r/m, r",
                "AND r, r/m",
                "OR r/m, r",
                "OR r, r/m"
            ]
        },
        "SUB/XOR":{
            "Description": "Must have both operands same (registers)! This has priority over the 'AND' and 'OR' classes. E.g. XOR/SUB eax, eax. Only Flag AF is modified by both instructions in different way, therefore it has to be checked. Form of the instruction (r/m, r or r, r/m) determines Direction bit inside instruction OPCODE (0 and 1, respectively).",
            "Members": [
                "XOR r/m, r",
                "XOR r, r/m",
                "SUB r/m, r",
                "SUB r, r/m"
            ]
        },
        "MOV": {
            "Description": "MOV instruction has two possible opcodes when both operands are any registers. E.g. MOV ebx, ecx. Form of the instruction (r/m, r or r, r/m) determines Direction bit inside instruction OPCODE (0 and 1, respectively).",
            "Members": [
                "MOV r/m, r",
                "MOV r, r/m"
            ]
        },
        "ADD": {
            "Description": "ADD instruction has two possible opcodes when both operands are any registers. E.g. ADD ebx, ecx. Form of the instruction (r/m, r or r, r/m) determines Direction bit inside instruction OPCODE (0 and 1, respectively).",
            "Members": [
                "ADD r/m, r",
                "ADD r, r/m"
            ]
        },
        "SUB": {
            "Description": "SUB instruction has two possible opcodes when both operands are any registers. E.g. SUB ebx, ecx. Form of the instruction (r/m, r or r, r/m) determines Direction bit inside instruction OPCODE (0 and 1, respectively).",
            "Members": [
                "SUB r/m, r",
                "SUB r, r/m"
            ]
        },
        "AND": {
            "Description": "AND instruction has two possible opcodes when both operands are any registers. E.g. AND ebx, ecx. Form of the instruction (r/m, r or r, r/m) determines Direction bit inside instruction OPCODE (0 and 1, respectively).",
            "Members": [
                "AND r/m, r",
                "AND r, r/m"
            ]
        },
        "OR": {
            "Description": "OR instruction has two possible opcodes when both operands are any registers. E.g. OR ebx, ecx. Form of the instruction (r/m, r or r, r/m) determines Direction bit inside instruction OPCODE (0 and 1, respectively).",
            "Members": [
                "OR r/m, r",
                "OR r, r/m"
            ]
        },
        "XOR": {
            "Description": "XOR instruction has two possible opcodes when both operands are any registers. E.g. XOR ebx, ecx. Form of the instruction (r/m, r or r, r/m) determines Direction bit inside instruction OPCODE (0 and 1, respectively).",
            "Members": [
                "XOR r/m, r",
                "XOR r, r/m"
            ]
        },
        "CMP": {
            "Description": "CMP instruction has two possible opcodes when both operands are any registers. E.g. CMP ebx, ecx. Form of the instruction (r/m, r or r, r/m) determines Direction bit inside instruction OPCODE (0 and 1, respectively).",
            "Members": [
                "CMP r/m, r",
                "CMP r, r/m"
            ]
        },
        "ADC": {
            "Description": "ADC instruction has two possible opcodes when both operands are any registers. E.g. ADC ebx, ecx. Form of the instruction (r/m, r or r, r/m) determines Direction bit inside instruction OPCODE (0 and 1, respectively).",
            "Members": [
                "ADC r/m, r",
                "ADC r, r/m"
            ]
        },
        "SBB": {
            "Description": "SBB instruction has two possible opcodes when both operands are any registers. E.g. SBB ebx, ecx. Form of the instruction (r/m, r or r, r/m) determines Direction bit inside instruction OPCODE (0 and 1, respectively).",
            "Members": [
                "SBB r/m, r",
                "SBB r, r/m"
            ]
        },
    
    
        "ADD negated": {
            "Description": "Addition with immediate value and subtraction with its negative form of immediate value! E.g. ADD ebx, 0x10; SUB ebx, -0x10. Flags OF, CF and AF are modified differently, therefore they need to be checked.",
            "Members": [
                "ADD r/m, imm",
                "SUB r/m, -imm"
            ]
        },
        "SUB negated": {
            "Description": "Subtraction with immediate value and addition with its negative form of immediate value! E.g. SUB ebx, 0x10; ADD ebx, -0x10. Flags OF, CF and AF are modified differently, therefore they need to be checked.",
            "Members": [
                "SUB r/m, imm",
                "ADD r/m, -imm"
            ]
        }
    }
}